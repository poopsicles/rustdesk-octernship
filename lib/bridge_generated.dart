// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<String> getUsername({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_username(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetUsernameConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUsernameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_username",
        argNames: [],
      );

  Future<List<EscalationMethod>> determineEscalationMethods({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_determine_escalation_methods(port_),
      parseSuccessData: _wire2api_list_escalation_method,
      constMeta: kDetermineEscalationMethodsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDetermineEscalationMethodsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "determine_escalation_methods",
        argNames: [],
      );

  Future<String> getDirectoryListing(
      {required EscalationMethod method,
      String? username,
      String? password,
      dynamic hint}) {
    var arg0 = api2wire_escalation_method(method);
    var arg1 = _platform.api2wire_opt_String(username);
    var arg2 = _platform.api2wire_opt_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_directory_listing(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kGetDirectoryListingConstMeta,
      argValues: [method, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDirectoryListingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_directory_listing",
        argNames: ["method", "username", "password"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  EscalationMethod _wire2api_escalation_method(dynamic raw) {
    return EscalationMethod.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<EscalationMethod> _wire2api_list_escalation_method(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_escalation_method).toList();
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_escalation_method(EscalationMethod raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
