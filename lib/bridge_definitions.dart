// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  /// Gets the current user's username.
  Future<String> getUsername({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUsernameConstMeta;

  /// Gets the possible privilege escalation methods by checking for the existence of
  /// `pkexec`, `sudo`, and `su`, in that order.
  ///
  /// ## Returns:
  /// - A `Vec<EscalationMethod>` containing the applicable escalation methods
  Future<List<EscalationMethod>> determineEscalationMethods({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDetermineEscalationMethodsConstMeta;

  /// Gets the contents of `/root` using the specified privilege escalation method.
  ///
  /// ## Arguments:
  /// - `method`: The privilege escalation method to use
  /// - `username`: The username to use for `su` (if applicable)
  /// - `password`: The password to use for `sudo` or `su` (if applicable)
  ///
  /// ## Returns:
  /// - An `Ok<String>` if `ls` has a 0 exit code
  /// - An `Err<DirectoryListingError>` otherwise
  ///
  /// The error returned is one of the following:
  /// - `DirectoryListingError::FailedToAuthenticate` if `sudo` or `su` exits with 1, or `pkexec` exits with 126 or 127
  /// - `DirectoryListingError::NoSuchDirectory` if `ls` exits with 2 and the error message contains "No such file or directory"
  /// - `DirectoryListingError::PermissionDenied` if `ls` exits with 2 and the error message contains "Permission denied"
  /// - `DirectoryListingError::Unknown` otherwise
  Future<String> getDirectoryListing(
      {required EscalationMethod method,
      String? username,
      String? password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDirectoryListingConstMeta;
}

/// Possible methods for privilege escalation.
enum EscalationMethod {
  Polkit,
  Sudo,
  Su,
  None,
}
